import React, { useState, useEffect } from "react";
import { Container, Form, Button, Table, Card, Row, Col } from "react-bootstrap";
import axios from "axios";
import { toast } from "react-hot-toast";
import "./Profile.css"; // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CSS

const Profile = () => {
  const [user, setUser] = useState(null);
  const [address, setAddress] = useState("");
  const [orders, setOrders] = useState([]);

  useEffect(() => {
    const fetchProfileData = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");

        const userResponse = await axios.get(
          "https://beerbot-cfhp.onrender.com/api/auth/profile",
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setUser(userResponse.data.user);
        setAddress(userResponse.data.user.address || "");

        const ordersResponse = await axios.get(
          "https://beerbot-cfhp.onrender.com/api/orders",
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setOrders(ordersResponse.data);
      } catch (err) {
        toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∑–∞–∫–∞–∑–æ–≤");
        console.error("–û—à–∏–±–∫–∞:", err.response || err);
      }
    };
    fetchProfileData();
  }, []);

  const handleSaveAddress = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");

      await axios.put(
        "https://beerbot-cfhp.onrender.com/api/auth/profile/address",
        { address },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      toast.success("–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    } catch (err) {
      toast.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞");
      console.error("–û—à–∏–±–∫–∞:", err.response || err);
    }
  };

  return (
    <Container className="profile-container">
      <h2 className="profile-title">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>

      {user && (
        <Card className="profile-card">
          <Card.Header>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</Card.Header>
          <Card.Body>
            <Row className="profile-info">
              <Col xs={12} md={6}>
                <p>
                  <strong>Email:</strong> {user.email}
                </p>
              </Col>
              <Col xs={12} md={6}>
                <p>
                  <strong>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</strong> {user.contact_face}
                </p>
              </Col>
              <Col xs={12} md={6}>
                <p>
                  <strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> {user.organization_name}
                </p>
              </Col>
              <Col xs={12} md={6}>
                <p>
                  <strong>–ò–ù–ù:</strong> {user.inn}
                </p>
              </Col>
              <Col xs={12} md={6}>
                <p>
                  <strong>–ï–ì–ê–ò–°:</strong> {user.egais_number}
                </p>
              </Col>
              <Col xs={12} md={6}>
                <p>
                  <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {user.phone}
                </p>
              </Col>
              <Col xs={12}>
                <p>
                  <strong>–ê–¥—Ä–µ—Å:</strong> {user.address || "–ù–µ —É–∫–∞–∑–∞–Ω"}
                </p>
              </Col>
            </Row>
          </Card.Body>
        </Card>
      )}

      <Card className="profile-card">
        <Card.Header>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</Card.Header>
        <Card.Body>
          <Form onSubmit={handleSaveAddress} className="profile-address-form">
            <Form.Group controlId="formAddress">
              <Form.Label>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å</Form.Label>
              <Form.Control
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
              />
            </Form.Group>
            <Button variant="primary" type="submit" className="mt-3">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å
            </Button>
          </Form>
        </Card.Body>
      </Card>

      <Card className="profile-card">
        <Card.Header>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</Card.Header>
        <Card.Body>
          {orders.length === 0 ? (
            <p>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
          ) : (
            <Table
              striped
              bordered
              hover
              responsive
              className="profile-orders-table"
            >
              <thead>
                <tr>
                  <th>–ö–æ–¥</th>
                  <th>–î–∞—Ç–∞</th>
                  <th>–û–±—â–∞—è —Å—É–º–º–∞</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–¢–æ–≤–∞—Ä—ã</th>
                </tr>
              </thead>
              <tbody>
                {orders.map((order) => (
                  <tr key={order.id}>
                    <td style={{minWidth: 90}}>
                      <div style={{display:'flex',alignItems:'center',gap:4}}>
                        <span style={{fontFamily:'monospace',fontSize:'0.95em'}}>{order.order_code}</span>
                        <Button
                          variant="outline-secondary"
                          size="sm"
                          style={{padding:'2px 7px',fontSize:'0.85em'}}
                          onClick={() => {
                            navigator.clipboard.writeText(order.order_code);
                            toast.success('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                          }}
                        >
                          üìã
                        </Button>
                      </div>
                    </td>
                    <td>{new Date(order.created_at).toLocaleDateString()}</td>
                    <td>{order.total_price} ‚ÇΩ</td>
                    <td>{order.status}</td>
                    <td>
                      <ul className="mb-0 ps-3">
                        {order.items.map((item) => (
                          <li key={item.product_id}>
                            {item.name} ‚Äî {item.quantity} —à—Ç. –ø–æ {item.price_at_order} ‚ÇΩ
                          </li>
                        ))}
                      </ul>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          )}
        </Card.Body>
      </Card>
    </Container>
  );
};

export default Profile;